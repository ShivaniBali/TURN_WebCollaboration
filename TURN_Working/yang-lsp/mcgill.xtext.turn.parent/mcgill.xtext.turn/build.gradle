ext.title = 'Yang Language'
description = 'Language infrastructure for Yang based on Xtext'

configurations {
	mwe2 {
		extendsFrom compile
	}
}

dependencies {
	compile "org.eclipse.xtext:org.eclipse.xtext:${versions.xtext}"
	compile "com.google.code.gson:gson:${versions.gson}"
	compile "xerces:xercesImpl:${versions.xerces}"
	
	testCompile "junit:junit:${versions.junit}"
	testCompile "org.eclipse.xtext:org.eclipse.xtext.testing:${versions.xtext}"
    
	mwe2 "org.eclipse.emf:org.eclipse.emf.mwe2.launch:${versions.mwe2}"
	mwe2 "org.eclipse.xtext:org.eclipse.xtext.common.types:${versions.xtext}"
	mwe2 "org.eclipse.xtext:org.eclipse.xtext.xtext.generator:${versions.xtext}"
	mwe2 "org.eclipse.xtext:xtext-antlr-generator:${versions.antlrgen}"
    mwe2 "io.typefox.xtext:jflex-fragment:${versions.jflexgen}"
}

task generateXtextLanguage(type: JavaExec) {
	main = 'org.eclipse.emf.mwe2.launch.runtime.Mwe2Launcher'
	classpath = configurations.mwe2
	inputs.file "src/main/java/mcgill/xtext/turn/GenerateTURN.mwe2"
	inputs.file "src/main/java/mcgill/xtext/turn/TURN.xtext"
	outputs.dir "src/main/xtext-gen"
	args += "src/main/java/mcgill/xtext/turn/GenerateTURN.mwe2"
	args += "-p"
	args += "rootPath=/${projectDir}/.."
}

generateXtext.dependsOn(generateXtextLanguage)
clean.dependsOn(cleanGenerateXtextLanguage)
eclipse.classpath.plusConfigurations += [configurations.mwe2]
