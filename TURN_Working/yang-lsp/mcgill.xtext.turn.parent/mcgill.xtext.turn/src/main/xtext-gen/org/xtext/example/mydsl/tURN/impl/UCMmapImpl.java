/**
 * generated by Xtext 2.15.0-SNAPSHOT
 */
package org.xtext.example.mydsl.tURN.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

import org.xtext.example.mydsl.tURN.ComponentRef;
import org.xtext.example.mydsl.tURN.LongName;
import org.xtext.example.mydsl.tURN.Path;
import org.xtext.example.mydsl.tURN.StubDeclaration;
import org.xtext.example.mydsl.tURN.TURNPackage;
import org.xtext.example.mydsl.tURN.UCMmap;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>UC Mmap</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.xtext.example.mydsl.tURN.impl.UCMmapImpl#isSingleton <em>Singleton</em>}</li>
 *   <li>{@link org.xtext.example.mydsl.tURN.impl.UCMmapImpl#getName <em>Name</em>}</li>
 *   <li>{@link org.xtext.example.mydsl.tURN.impl.UCMmapImpl#getLongName <em>Long Name</em>}</li>
 *   <li>{@link org.xtext.example.mydsl.tURN.impl.UCMmapImpl#getStubs <em>Stubs</em>}</li>
 *   <li>{@link org.xtext.example.mydsl.tURN.impl.UCMmapImpl#getPaths <em>Paths</em>}</li>
 *   <li>{@link org.xtext.example.mydsl.tURN.impl.UCMmapImpl#getComponents <em>Components</em>}</li>
 * </ul>
 *
 * @generated
 */
public class UCMmapImpl extends URNmodelElementImpl implements UCMmap
{
  /**
   * The default value of the '{@link #isSingleton() <em>Singleton</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isSingleton()
   * @generated
   * @ordered
   */
  protected static final boolean SINGLETON_EDEFAULT = false;

  /**
   * The cached value of the '{@link #isSingleton() <em>Singleton</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isSingleton()
   * @generated
   * @ordered
   */
  protected boolean singleton = SINGLETON_EDEFAULT;

  /**
   * The default value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected static final String NAME_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected String name = NAME_EDEFAULT;

  /**
   * The cached value of the '{@link #getLongName() <em>Long Name</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getLongName()
   * @generated
   * @ordered
   */
  protected LongName longName;

  /**
   * The cached value of the '{@link #getStubs() <em>Stubs</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getStubs()
   * @generated
   * @ordered
   */
  protected EList<StubDeclaration> stubs;

  /**
   * The cached value of the '{@link #getPaths() <em>Paths</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getPaths()
   * @generated
   * @ordered
   */
  protected EList<Path> paths;

  /**
   * The cached value of the '{@link #getComponents() <em>Components</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getComponents()
   * @generated
   * @ordered
   */
  protected EList<ComponentRef> components;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected UCMmapImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return TURNPackage.Literals.UC_MMAP;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public boolean isSingleton()
  {
    return singleton;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setSingleton(boolean newSingleton)
  {
    boolean oldSingleton = singleton;
    singleton = newSingleton;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, TURNPackage.UC_MMAP__SINGLETON, oldSingleton, singleton));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getName()
  {
    return name;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setName(String newName)
  {
    String oldName = name;
    name = newName;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, TURNPackage.UC_MMAP__NAME, oldName, name));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public LongName getLongName()
  {
    return longName;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetLongName(LongName newLongName, NotificationChain msgs)
  {
    LongName oldLongName = longName;
    longName = newLongName;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, TURNPackage.UC_MMAP__LONG_NAME, oldLongName, newLongName);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setLongName(LongName newLongName)
  {
    if (newLongName != longName)
    {
      NotificationChain msgs = null;
      if (longName != null)
        msgs = ((InternalEObject)longName).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - TURNPackage.UC_MMAP__LONG_NAME, null, msgs);
      if (newLongName != null)
        msgs = ((InternalEObject)newLongName).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - TURNPackage.UC_MMAP__LONG_NAME, null, msgs);
      msgs = basicSetLongName(newLongName, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, TURNPackage.UC_MMAP__LONG_NAME, newLongName, newLongName));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<StubDeclaration> getStubs()
  {
    if (stubs == null)
    {
      stubs = new EObjectContainmentEList<StubDeclaration>(StubDeclaration.class, this, TURNPackage.UC_MMAP__STUBS);
    }
    return stubs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<Path> getPaths()
  {
    if (paths == null)
    {
      paths = new EObjectContainmentEList<Path>(Path.class, this, TURNPackage.UC_MMAP__PATHS);
    }
    return paths;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<ComponentRef> getComponents()
  {
    if (components == null)
    {
      components = new EObjectContainmentEList<ComponentRef>(ComponentRef.class, this, TURNPackage.UC_MMAP__COMPONENTS);
    }
    return components;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case TURNPackage.UC_MMAP__LONG_NAME:
        return basicSetLongName(null, msgs);
      case TURNPackage.UC_MMAP__STUBS:
        return ((InternalEList<?>)getStubs()).basicRemove(otherEnd, msgs);
      case TURNPackage.UC_MMAP__PATHS:
        return ((InternalEList<?>)getPaths()).basicRemove(otherEnd, msgs);
      case TURNPackage.UC_MMAP__COMPONENTS:
        return ((InternalEList<?>)getComponents()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case TURNPackage.UC_MMAP__SINGLETON:
        return isSingleton();
      case TURNPackage.UC_MMAP__NAME:
        return getName();
      case TURNPackage.UC_MMAP__LONG_NAME:
        return getLongName();
      case TURNPackage.UC_MMAP__STUBS:
        return getStubs();
      case TURNPackage.UC_MMAP__PATHS:
        return getPaths();
      case TURNPackage.UC_MMAP__COMPONENTS:
        return getComponents();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case TURNPackage.UC_MMAP__SINGLETON:
        setSingleton((Boolean)newValue);
        return;
      case TURNPackage.UC_MMAP__NAME:
        setName((String)newValue);
        return;
      case TURNPackage.UC_MMAP__LONG_NAME:
        setLongName((LongName)newValue);
        return;
      case TURNPackage.UC_MMAP__STUBS:
        getStubs().clear();
        getStubs().addAll((Collection<? extends StubDeclaration>)newValue);
        return;
      case TURNPackage.UC_MMAP__PATHS:
        getPaths().clear();
        getPaths().addAll((Collection<? extends Path>)newValue);
        return;
      case TURNPackage.UC_MMAP__COMPONENTS:
        getComponents().clear();
        getComponents().addAll((Collection<? extends ComponentRef>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case TURNPackage.UC_MMAP__SINGLETON:
        setSingleton(SINGLETON_EDEFAULT);
        return;
      case TURNPackage.UC_MMAP__NAME:
        setName(NAME_EDEFAULT);
        return;
      case TURNPackage.UC_MMAP__LONG_NAME:
        setLongName((LongName)null);
        return;
      case TURNPackage.UC_MMAP__STUBS:
        getStubs().clear();
        return;
      case TURNPackage.UC_MMAP__PATHS:
        getPaths().clear();
        return;
      case TURNPackage.UC_MMAP__COMPONENTS:
        getComponents().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case TURNPackage.UC_MMAP__SINGLETON:
        return singleton != SINGLETON_EDEFAULT;
      case TURNPackage.UC_MMAP__NAME:
        return NAME_EDEFAULT == null ? name != null : !NAME_EDEFAULT.equals(name);
      case TURNPackage.UC_MMAP__LONG_NAME:
        return longName != null;
      case TURNPackage.UC_MMAP__STUBS:
        return stubs != null && !stubs.isEmpty();
      case TURNPackage.UC_MMAP__PATHS:
        return paths != null && !paths.isEmpty();
      case TURNPackage.UC_MMAP__COMPONENTS:
        return components != null && !components.isEmpty();
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuffer result = new StringBuffer(super.toString());
    result.append(" (singleton: ");
    result.append(singleton);
    result.append(", name: ");
    result.append(name);
    result.append(')');
    return result.toString();
  }

} //UCMmapImpl
